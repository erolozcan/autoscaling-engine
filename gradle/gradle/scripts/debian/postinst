#!/bin/sh

# Copyright (c) 2016 Open Baton (http://www.openbaton.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################

OPENBATON_COMPONENT_NAME_FANCY="AutoScaling Engine (ASE)"
OPENBATON_COMPONENT_NAME=ase

OPENBATON_BASE_DIR=/usr
OPENBATON_COMPONENT_EXE_DIR=${OPENBATON_BASE_DIR}/bin

OPENBATON_BASE_CONFIG_DIR=/etc/openbaton
OPENBATON_COMPONENT_CONFIG_FILE=openbaton-${OPENBATON_COMPONENT_NAME}.properties

OPENBATON_COMPONENT_AUTOSTART_DEFAULT=true
OPENBATON_COMPONENT_AUTOSTART=${OPENBATON_COMPONENT_AUTOSTART:-$OPENBATON_COMPONENT_AUTOSTART_DEFAULT}

OPENBATON_NFVO_CONFIG_FILE=openbaton-nfvo.properties


####################
#### Open Baton ####
####################

configure_rabbitmq () {
    # Set the RabbitMQ IP
    rabbitmq_broker_ip=$( awk '$0 ~ "nfvo.rabbit.brokerIp ="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'= ' '{print $2}' )
    if [ ! -z ${rabbitmq_broker_ip+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting RabbitMQ IP into Auto Scaling Engine: ${rabbitmq_broker_ip}"
        export rabbitmq_broker_ip=${rabbitmq_broker_ip}
        sed -i "s/autoscaling.rabbitmq.brokerIp\s*=\s*localhost/autoscaling.rabbitmq.brokerIp\ =\ ${rabbitmq_broker_ip}/g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi

    # Set the RabbitMQ Management port
    rabbitmq_management_port=$( awk '$0 ~ "nfvo.rabbit.management.port ="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'= ' '{print $2}' )
    if [ ! -z ${rabbitmq_management_port+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting RabbitMQ Management port into Auto Scaling Engine: ${rabbitmq_management_port}"
        export rabbitmq_management_port=${rabbitmq_management_port}
        sed -i "s/autoscaling.rabbitmq.management.port\s*=\s*15672/autoscaling.rabbitmq.management.port\ =\ ${rabbitmq_management_port}/g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi
} 

configure_nfvo_admin_credentials () {
    # Set the NFVO admin's password
    nfvo_admin_password=$( awk '$0 ~ "nfvo.security.admin.password ="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'= ' '{print $2}' )
    if [ ! -z ${nfvo_admin_password+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting NFVO admin's password into Auto Scaling Engine: ${nfvo_admin_password}"
        export nfvo_admin_password=${nfvo_admin_password}
        sed -i "s/nfvo.password\s*=\s*openbaton/nfvo.password\ =\ ${nfvo_admin_password}/g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi
}

configure () {
    log_success_msg "Configuring Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation .."
    chmod a+x ${OPENBATON_COMPONENT_EXE_DIR}/openbaton-${OPENBATON_COMPONENT_NAME}
    configure_rabbitmq
    configure_nfvo_admin_credentials
    log_success_msg "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation completed"

    # Allow the use of the .deb package to install Open Baton with Docker (the Docker file developer need to manage the starting of the GVNFM in the Docker file)
    if [ "${OPENBATON_COMPONENT_AUTOSTART}" = "true" ]; then
        if systemctl start openbaton-${OPENBATON_COMPONENT_NAME}.service >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
            continue
        elif start openbaton-${OPENBATON_COMPONENT_NAME} >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
            continue
        else
            log_failure_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY}"
        fi
    fi
}

configure
